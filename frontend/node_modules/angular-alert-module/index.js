import { Component, Injectable, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs/Subject';

var AlertsConfigData = {};
AlertsConfigData.error = {
    icon: 'error'
};
AlertsConfigData.success = {
    icon: 'done'
};
AlertsConfigData.DefaultSettings = {
    icon: 'error',
    timeout: 3
};

var AlertsService = (function () {
    function AlertsService() {
        // Observable alerts
        this.alertsSubject = new Subject();
    }
    /**
     * @param {?} message
     * @param {?} type
     * @return {?}
     */
    AlertsService.prototype.setMessage = function (message, type) {
        this.alertsSubject.next({ message: message, type: type });
    };
    /**
     * @return {?}
     */
    AlertsService.prototype.getSubject = function () {
        return this.alertsSubject.asObservable();
    };
    /**
     * @param {?} messagetype
     * @param {?} key
     * @return {?}
     */
    AlertsService.prototype.getConfig = function (messagetype, key) {
        if (typeof AlertsConfigData[messagetype] == 'undefined') {
            return AlertsConfigData.DefaultSettings[key];
        }
        else {
            return (typeof AlertsConfigData[messagetype][key] != 'undefined') ? AlertsConfigData[messagetype][key] : AlertsConfigData.DefaultSettings[key];
        }
    };
    /**
     * @param {?} messagetype
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AlertsService.prototype.setConfig = function (messagetype, key, value) {
        if (typeof AlertsConfigData[messagetype] == 'undefined') {
            AlertsConfigData[messagetype] = {};
        }
        AlertsConfigData[messagetype][key] = value;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AlertsService.prototype.setDefaults = function (key, value) {
        AlertsConfigData.DefaultSettings[key] = value;
    };
    return AlertsService;
}());
AlertsService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AlertsService.ctorParameters = function () { return []; };

var AlertsComponent = (function () {
    /**
     * @param {?} alerts
     */
    function AlertsComponent(alerts) {
        this.alerts = alerts;
        this.messages = [];
    }
    /**
     * @return {?}
     */
    AlertsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.alerts.getSubject().subscribe(function (object) {
            object.icon = _this.alerts.getConfig(object.type, 'icon');
            _this.timeout = _this.alerts.getConfig(object.type, 'timeout');
            console.log('this.timeout', _this.timeout);
            _this.messages.push(object);
            if (_this.timeout > 0) {
                setTimeout(function () {
                    _this.removeMessage(object);
                }, _this.timeout * 1000);
            }
        });
    };
    /**
     * @param {?} message
     * @return {?}
     */
    AlertsComponent.prototype.removeMessage = function (message) {
        this.messages.splice(this.messages.indexOf(message), 1);
    };
    return AlertsComponent;
}());
AlertsComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-alerts',
                template: "<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">
                  <div  class=\"alertsContainer\">
                    <div class=\"alert {{message.type}}\" *ngFor=\"let message of messages\">
                    <div class=\"messagepanel alert\">{{message.message}}</div>
                      <div class=\"closeicon\">
                        <a (click)=\"removeMessage(message)\" href=\"#\">X</a>
                      </div>
                    </div>
                  </div>",
                styles:
            },] },
];
/**
 * @nocollapse
 */
AlertsComponent.ctorParameters = function () { return [
    { type: AlertsService, },
]; };

var AlertsModule = (function () {
    function AlertsModule() {
    }
    /**
     * @return {?}
     */
    AlertsModule.forRoot = function () {
        return {
            ngModule: AlertsModule,
            providers: [AlertsService]
        };
    };
    return AlertsModule;
}());
AlertsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    AlertsComponent
                ],
                exports: [
                    AlertsComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
AlertsModule.ctorParameters = function () { return []; };

export { AlertsModule, AlertsComponent, AlertsService };
